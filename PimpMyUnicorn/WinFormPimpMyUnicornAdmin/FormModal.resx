<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="openFileDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        sOjFvrD/xb6w/8W+sP/Du63/v7eo/8S9r//Eva//urOlnJWMewIAAAAAAAAAAAAAAAAAAAAAkmHpA4ZK
        +LWBQP//gkL9/5Ji1v+UZOT/gED2/3c1yP+zn7T/vLCy/8G4sf/Fv7D/xb6w/8S+sMHEvbAwxL6vVMS+
        sMXFvrD+xb6w/8W+sP/FvrD/xb6w/8W+sP/Gv7H/xb6w/8S+sMjGwLIzwLioAAAAAAAAAAAAAAAAAAAA
        AACLU/EEhEf6wIFA//+BP///jFbp/5Zn4/+CQvz/ezrU/6yTtf+deLn/qo62/8bAsP/FvrD/xb6w/cW+
        sOTFvrDwxb6w/8W+sP/FvrD/xb6w/8W+sP/FvrD/xb6w/8W+sP/FvrDIxb2wMsm9uADDva4AAAAAAAAA
        AAAAAAAAAAAAAJlw3gKHTPengUH//4FA//+FR/r/kF3p/4NE/v95NuL/pIS3/5ZrwP+ETb//wbix/8W+
        sP/FvrD/xb6w/8W+sP/FvrD/xb6w/8W+sP/FvrD/xb6w/8W+sP/FvrD/xb6w3MS+sEDEvbAAw72uAMO9
        rgAAAAAAAAAAAAAAAAAAAAAAfTn/AIJD/E+BQP/zgUD//4FA//+FR/r/g0P+/4BA7f+fe7//nHPW/3Yz
        zf+tlLX/xsCw/8W+sP/FvrD/xb6w/8W+sP/FvrD/xb6w/8W+sP/FvrD/xb6w/8W+sPbFvrBo/f8AAMXA
        rQDEv68AAAAAAAAAAAAAAAAAAAAAAAAAAACAQP0Agj39DoA//qWBQP//gUD//4FA//+BQP//hEb4/5ds
        y/+Ya+P/eznj/5Ztuv/FvrD/xb6w/8W+sP/FvrD/xb6w/8W+sP/FvrD/xr+x/8a/sf/FvrD/xL6wqMS+
        rw/Evq8AxL+vAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGNN9ACAQP4AgED+NIFA/9mBQP//gUD//4FA
        //+BQP//kWDc/5hq5P+APvb/i1jH/76ysf/Gv7D/xb6w/8W+sP/FvrD/xb6w/8W+sP+tp5n/rKWY/8W+
        r+fFv69AxMCuAMq1sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgj7+AIBK/wCgAPoAgED+XIFA
        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
        AAf/gAAD//AAA///wAP//+GD//////////8=
</value>
  </data>
</root>